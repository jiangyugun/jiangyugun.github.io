<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>醬油膏のBlog</title>
    <link>https://jiangyugun.github.io/</link>
    <description>Recent content on 醬油膏のBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 18 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://jiangyugun.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dapper.Contrib 介紹</title>
      <link>https://jiangyugun.github.io/posts/dotnet-dapper-contrib/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://jiangyugun.github.io/posts/dotnet-dapper-contrib/</guid>
      <description>你是否曾有過為了CRUD需求，寫一堆語法、設定Parameters參數，再透過IDbConnection Execute與資料庫進行交易? 當需求做完時，回頭發現一堆密密麻麻的語法，看了好不開心(;´༎ຶД༎ຶ`)
那有沒有什麼作法可以簡短這些語法呢?
並且還能針對特定資料異動更新 ! 歡迎試試 Dapper Contrib (*´∀`)~♥ ~
簡介 Dapper.Contrib 提供CRUD的擴充方法，針對IDbConnection型別進行擴充，他會根據Model定義自動渲染SQL語法，對於簡單的CRUD情境相當適合，從原本需要Command以及Parameter的寫法，變成只需要Insert(Model)
使用Dapper.Contrib的前置作業 using Dapper.Contrib.Extensions; [Table(&amp;#34;Member&amp;#34;)] public class Member { [Key] [ExplicitKey] public Guid Id { get; set; } [Computed] public long SequenceId { get; set; } public string Name { get; set; } public int Age { get; set; } } 說明上方使用到幾個Attribute Key : 預設會把Id或是有 [Key] 指定為主鍵、自動運算的欄位，而不產生語法
ExplicitKey : 指定為主鍵，不是自動運算的欄位，要產生語法
Computed : 在執行Insert、Update操作時，不產生語法，該屬性的值是由資料庫計算而來，而不是由應用程式直接提供的
Table(”TableName”) : 預設使用Class Name當Table Name，這明確指定Table Name，不使用Class Name當Table Name</description>
    </item>
    
    <item>
      <title>Async/Await介紹</title>
      <link>https://jiangyugun.github.io/posts/dotnet-async/</link>
      <pubDate>Mon, 17 Jul 2023 04:16:46 +0000</pubDate>
      
      <guid>https://jiangyugun.github.io/posts/dotnet-async/</guid>
      <description>最近因應專案需求，要將現有的API套用Async
之前都只有上網看看別人文章、自己稍微做個實作測試
這是第一次真的在實際專案上應用
所以在開始之前，來補足一下知識，避免碰到問題不知道該從何下手(๑•́ ₃ •̀๑)
Async(非同步)與Sync(同步)的差別 Synchronous(同步) 逐行的方式執行，代表前面程式完成之前，後面的程式必須等待前者執行完，才能運行
Asynchronous(非同步) 第一個程式正在運行時，其他程式也能繼續運行下去
非同步(Asynchronous)不在於提高效能，而是增加產能 非同步的優勢在於降低等待，讓執行緒能夠同時處裡更多事情藉以增加產能 非同步追求的是在相同時間內處理更多請求，並非以更快速度處理掉一個請求 非同步不等於多執行緒 多緒執行 在於建立多條執行緒，把多個工作交給不同執行緒個別處裡，屬分工加速
非同步 允許執行緒在等待時間先處理其他工作，透過消除閒置增加產能
非同步只對 I/O 相關作業有效，對吃CPU作業無法 作業涉及外部資源或I/O相關 存取資料庫 呼叫Web API
等待回應期間，都可透過非同步讓執行緒去處理其他作業
作業涉及大量消耗CPU的重度運算 代表執行緒從頭忙到尾，既然不會閒下來等待，也就不會分別去處裡其他作業
結論 若是一堆吃CPU的作業，增加執行緒肯定可以加速 若為等待I/O回應的作業，增加執行緒的效果不大，變更為非同步作業才算有效 Async 像病毒一樣傳染 剛開始寫async / await很常碰到一件事情，只要方法前面加上async關鍵字，裡外呼叫的方法必須加上await才合規範，而要加await該外部方法也必須得加上async，緊接著外部方法又被要求使用await…
此一設計理由是為了避免同步與非同步寫法混用以防止在GUI/ASP.NET情境產生Deadlock
Deadlock實例，可參考以下:
- await與Task.Result/Task.Wait()的Deadlock問題
- A Practical Example Of Asynchronous Programming in C# and ASP.NET
回傳型別 宣告為async的.NET 方法必須傳回以下三種型別之一 :
Task
作業結束時將控制權還給呼叫端 Task&amp;lt;T&amp;gt;
作業結束時回傳型別為T的物件給呼叫端 void
採射後不理哲學，呼叫後即失去掌握 async void 在實務上不應使用，事件處理器是唯一例外 參考資料 ASP.NET async 基本心法 The Ultimate Guide to Async and Await in C# and ASP.</description>
    </item>
    
    <item>
      <title>Refresh Token In .Net 6</title>
      <link>https://jiangyugun.github.io/posts/dotnet-refresh-token/</link>
      <pubDate>Fri, 30 Jun 2023 02:12:46 +0000</pubDate>
      
      <guid>https://jiangyugun.github.io/posts/dotnet-refresh-token/</guid>
      <description>為何需要Refresh Token? 如果長時間使用同個Token，駭客可能竊取Token濫用它，因此長時間不變更Token是很不安全的 當access Token過期時，可以使用Refresh Token從身份驗證獲取新的access Token Refresh Token 的生命週期比access Token還要長 JWT 是一種 Bearer Token 因此在Authorization帶入 Authorization: &amp;lsquo;Bearer &amp;rsquo; + token 運作機制 將生成的Refresh Token以及過期時效儲存在資料庫中，Refresh Token只有在申請新的Access Token時才會驗證，所以將Refresh Token儲存在資料庫中，不會對業務接口響應時間造成影響，也不需要像Session一樣一直保持在內存中以應對大量的請求。 提供server端禁用用戶Token的方式，當用戶登出或禁用用戶時，只需要將server端的Refresh Token禁用或刪除，用戶就會在Access Token過期後，由於無法獲取到新的Access Token，再也無法訪問需認證的接口，如下圖的架構 : 實作流程 必要的NuGet套件 Microsoft.EntityFrameworkCore.SqlServer Microsoft.EntityFrameworkCore.Tools Microsoft.AspNetCore.Identity.EntityFrameworkCore Microsoft.AspNetCore.Authentication.JwtBearer (待後續補足&amp;hellip; 很多流程其實都跟參考資料一樣)
實作過程有碰到的問題 Claimsldentity.Name is always null
解決方法 : 3 Common Problems with ClaimsIdentity and ClaimsPrincipal in ASP.NET Core 參考資料 https://www.c-sharpcorner.com/article/jwt-authentication-with-refresh-tokens-in-net-6-0/ https://zhuanlan.zhihu.com/p/52300092</description>
    </item>
    
    <item>
      <title>GraphQL-為API設計的資料查詢</title>
      <link>https://jiangyugun.github.io/posts/graphql-about/</link>
      <pubDate>Wed, 28 Jun 2023 02:12:46 +0000</pubDate>
      
      <guid>https://jiangyugun.github.io/posts/graphql-about/</guid>
      <description>背景 絕大多數的實際應用，後端提供的接口基於RESTful風格，而RESTful架構的服務是圍繞資源展開的。隨著業務複雜度的提高，前端畫面訊息和交互體驗愈加複雜。
RESTfull通常會遇到的痛點 1.性能瓶頸
後端往往是採取微服務架構，拆成多個服務，一個頁面往往需要發送多個請求，才能獲取足夠的資料。而對於同一個接口，如果參數有多種組合，需要調用多次才行。 請求的數量越多，以下耗時越多: 隊列等待時間 連接建立和銷毀耗時 後端重複的權限或參數校驗 客戶端與服務器之間來回響應時間 2.數據冗餘
後端提供的接口，通常會在多個頁面中使用，後端無法事先預知前端需要哪些資料，因此幾乎都是返回全部資料，寧多勿缺。隨著業務功能的發展，會加入更多的資料，而且為了保持兼容性，只增不減。 3.文檔缺失
文檔跟接口分離，無法值觀通過接口或者單個聞檔或取所有需要的接口訊息。與此同時，文檔很難與實作完全保持一致，都需要依靠人工來確保資訊正確。 簡介 作為Facebook在2015年推出的查詢與顏，GraphQL能對API的資料提供一套淺顯易懂的完整描述，能使前端更加準確獲取需要的資料。
以下是官方對GraphQL的定義
GraphQl既是一種用於API的查詢語言也是一個滿足數據查詢運行時。 GraphQL對API中的數據提供了一套易於理解的完整描述，使得客戶端能夠準確的獲得需要的數據，而且沒有任何冗餘，也讓API更容易隨著時間推移而演進，還能用於構建強大的開發者工具。
GraphQL的強大表達能力主要還是來自於它完備的類型系統，與REST不同，它將整個Web服務中的全部資源看成一個有連結的圖，而不是一個個資源孤島，在訪問任何資源時都可以通過資源之間的連接訪問其他的資源。
舉個例子，假如有以下的結構 當訪問User資源時，可以通過GraphQL中的連接訪問當前User的Repo和Issue等資源，我們不再需要透過多個REST的接口個別獲取這些資料，只需要通過如下所示的查詢就能一次性拿到全部的結果:
{ user{ id email username repos(first:10){ id url name issues(first:20){ id author title } } } } GraphQL這種方式能將原有的RESTful多次請求聚合成一次請求，不僅能夠減少多次請求帶來的延遲，還能夠降低server壓力，使得前端渲染速度加快。
GraphQL vs RESTful 與RESTful明顯不同之處，是每個GraphQL服務器對外只提供一個用於調用內部接口的端點，所有的請求都訪問這暴露出來的唯一短點。 GraphQL實際上將多個HTTP請求聚合成一個請求，只是將多個RESTful請求的資源變成一個從跟資源Post訪問其他資源的Comment和Author的圖，從原有的分散式請求變成了集中式的請求，這種方式非常適合單體服務直接對外提供GraphQL服務，能夠在數據源和展示層建立一個非常清晰的分離，同時也能夠通過一些強大的工具，例如GraphQL直接提供可視化的文檔。
優點 1.精準資料取得
宣告式(Declarative)資料索取 資料只拿剛好且彈性十足 透過資料之間的關係連接(就像一幅Graph)，大幅減少來回request的次數 2.程式即文檔
前後端溝通成本減少 實現以資料需求驅動(driven by data requirement)的設計 建立文檔(documentation)的時間成本幾近為0 3.前端控制權提升
過往為了因應不同的平台或是裝置而需要一套新的API系統 GraphQL API 則只需要一套，其他交給前端自行決定資料索取的格式&amp;amp;方式 由於GraphQL query與回傳的資料格式幾乎相同，大大減少前端錯估資料樣貌的可能性 前端不再被日益複雜的架構設計綁住 4.高度自由的實作方式
不預設綁任何程式語言或是資料庫 可將不同microservice的GraphQL schema串接在一起 5.</description>
    </item>
    
    <item>
      <title>IIS-編輯錯誤 錯誤代碼 : -532462766</title>
      <link>https://jiangyugun.github.io/posts/iis-error-532462766/</link>
      <pubDate>Wed, 28 Jun 2023 02:12:46 +0000</pubDate>
      
      <guid>https://jiangyugun.github.io/posts/iis-error-532462766/</guid>
      <description>有次突然接到新任務，上面要我協助修正專案且上線。
完完全全沒有碰過該專案，就這樣從版控抓最新程式下來，依據需求修改完畢、上測試機測試，突然就蹦出這問題&amp;hellip;
當下看到很傻眼，然後開始翻上個更新git是哪個人? 氣🐀!
解決方法 通常看到類似這種訊息，第一時間都會先去檢查web.config
但這專案真的有夠亂又老舊，不是很好閱讀
後來從stackoverflow找到解決方式，二話不說先刪除有問題的Code上測試機看結果 🤪🤪🤪
根據每個人專案配置不同，這不一定是最佳解法，參考就好&amp;hellip;
改完後，記得專案重建、Local運作看看，說不定又有新的問題出現~ (搞事
參考資料 Compiler Error Message: The compiler failed with error code -532462766 </description>
    </item>
    
    <item>
      <title>MS-SQL 常用的日期格式轉換</title>
      <link>https://jiangyugun.github.io/posts/mssql-convertdate/</link>
      <pubDate>Wed, 28 Jun 2023 02:12:46 +0000</pubDate>
      
      <guid>https://jiangyugun.github.io/posts/mssql-convertdate/</guid>
      <description>有段時間沒用這些語法，會忘光光
所以就來簡單記錄一下~
(也可以直接請chatGPT幫忙產 🤪，懶人~)
拆解日期 Select GETDATE() as &amp;#39;當前日期&amp;#39;, DateName(year, GETDATE()) as &amp;#39;年&amp;#39;, DateName(month, GETDATE()) as &amp;#39;月&amp;#39;, DateName(day, GETDATE()) as &amp;#39;日&amp;#39;, DateName(dw, GETDATE()) as &amp;#39;星期&amp;#39;, DateName(week, GETDATE()) as &amp;#39;周數&amp;#39;, DateName(hour, GETDATE()) as &amp;#39;時&amp;#39;, DateName(minute, GETDATE()) as &amp;#39;分&amp;#39;, DateName(second, GETDATE()) as &amp;#39;秒&amp;#39; 上述語法得出的結果如下:</description>
    </item>
    
    <item>
      <title>Theme Documentation - Basics</title>
      <link>https://jiangyugun.github.io/posts/theme-documentation-basics/</link>
      <pubDate>Fri, 06 Mar 2020 21:29:01 +0800</pubDate>
      
      <guid>https://jiangyugun.github.io/posts/theme-documentation-basics/</guid>
      <description>Gokarna is an opinionated theme with a focus on minimalism and simplicity.
Installation The following steps are here to help you initialize your new website. If you don’t know Hugo at all, we strongly suggest you learn more about it by following this great documentation for beginners.
a. Create Your Project Hugo provides a new command to create a new website:
hugo new site my_website cd my_website b. Install the Theme The theme’s repository is: https://github.</description>
    </item>
    
    <item>
      <title>Theme Documentation - Advanced</title>
      <link>https://jiangyugun.github.io/posts/theme-documentation-advanced/</link>
      <pubDate>Wed, 06 May 2020 21:29:01 +0800</pubDate>
      
      <guid>https://jiangyugun.github.io/posts/theme-documentation-advanced/</guid>
      <description>Gokarna is an opinionated theme with a focus on minimalism and simplicity.
Content Types This theme supports two types of content types: post and page. To specify them, you need to add them in your markdown metadata.
Post This is the default blog post type which will be shown in your &amp;ldquo;Posts&amp;rdquo; section and who&amp;rsquo;s tags will be indexed. Basically, a normal blog post.
--- title: &amp;#34;Hello, world!&amp;#34; date: 2021-01-01 description: &amp;#34;A blog post&amp;#34; image: &amp;#34;/path/to/image.</description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://jiangyugun.github.io/posts/markdown-syntax/</link>
      <pubDate>Wed, 19 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jiangyugun.github.io/posts/markdown-syntax/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>https://jiangyugun.github.io/posts/emoji-support/</link>
      <pubDate>Thu, 01 Oct 2020 17:55:28 +0800</pubDate>
      
      <guid>https://jiangyugun.github.io/posts/emoji-support/</guid>
      <description>Emoji can be enabled in a Hugo project in a number of ways.
The emojify function can be called directly in templates or Inline Shortcodes.
To enable emoji globally, set enableEmoji to true in your site configuration and then you can type emoji shorthand codes directly in content files.
These begin and end with a colon and include the code of an emoji:
Gone camping! {?:}tent: Be back soon. That is so funny!</description>
    </item>
    
    <item>
      <title>Lorem Ipsum</title>
      <link>https://jiangyugun.github.io/posts/lorem-ipsum/</link>
      <pubDate>Thu, 15 Apr 2021 23:39:49 +0530</pubDate>
      
      <guid>https://jiangyugun.github.io/posts/lorem-ipsum/</guid>
      <description>Heading 1 &amp;ldquo;Lorem ipsum dolor sit amet, consectetaur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description>
    </item>
    
    <item>
      <title>Blüdhaven</title>
      <link>https://jiangyugun.github.io/projects/bludhaven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiangyugun.github.io/projects/bludhaven/</guid>
      <description>History Blüdhaven was a former whaling town, which was officially incorporated as a &amp;ldquo;Commonwealth&amp;rdquo; in 1912. The town had a generally poor socio-economic populace, owing in part to failed efforts to transform itself into a manufacturing and shipping center.</description>
    </item>
    
    <item>
      <title>Hydra</title>
      <link>https://jiangyugun.github.io/projects/hydra/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiangyugun.github.io/projects/hydra/</guid>
      <description>Motto Cut off one head and two will take their place</description>
    </item>
    
    <item>
      <title>Tatooine</title>
      <link>https://jiangyugun.github.io/projects/tatooine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jiangyugun.github.io/projects/tatooine/</guid>
      <description>A long time ago in a galaxy far, far away&amp;hellip;. A project was planned, but never completed</description>
    </item>
    
  </channel>
</rss>
