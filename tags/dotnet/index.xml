<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotnet on 醬油膏のBlog</title>
    <link>https://jiangyugun.github.io/tags/dotnet/</link>
    <description>Recent content in dotnet on 醬油膏のBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 19 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://jiangyugun.github.io/tags/dotnet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dapper.Contrib 實際應用</title>
      <link>https://jiangyugun.github.io/posts/dotnet-dapper-contrib-example/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://jiangyugun.github.io/posts/dotnet-dapper-contrib-example/</guid>
      <description>一般CRUD情境 假設要新增、修改使用者的證照清單，操作範例如下:
證照清單 Model 依據資料表License建立一個Model為TLicense
namespace TestService.Models { /// &amp;lt;summary&amp;gt; /// 證照資料 /// &amp;lt;/summary&amp;gt; public class TLicense { /// &amp;lt;summary&amp;gt; /// 流水號 /// &amp;lt;/summary&amp;gt; public int no { get; set; } /// &amp;lt;summary&amp;gt; /// 證照種類 /// &amp;lt;/summary&amp;gt; public string licn_typ { get; set; } /// &amp;lt;summary&amp;gt; /// 證照名稱 /// &amp;lt;/summary&amp;gt; public string licn_name { get; set; } /// &amp;lt;summary&amp;gt; /// 發照單位 /// &amp;lt;/summary&amp;gt; public string licn_unit { get; set; } } } 新增 using (var connection = new SqlConnection(connectionString)) { connection.</description>
    </item>
    
    <item>
      <title>Dapper.Contrib 介紹</title>
      <link>https://jiangyugun.github.io/posts/dotnet-dapper-contrib/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://jiangyugun.github.io/posts/dotnet-dapper-contrib/</guid>
      <description>你是否曾有過為了CRUD需求，寫一堆語法、設定Parameters參數，再透過IDbConnection Execute與資料庫進行交易? 當需求做完時，回頭發現一堆密密麻麻的語法，看了好不開心(;´༎ຶД༎ຶ`)
那有沒有什麼作法可以簡短這些語法呢?
並且還能針對特定資料異動更新 ! 歡迎試試 Dapper Contrib (*´∀`)~♥ ~
簡介 Dapper.Contrib 提供CRUD的擴充方法，針對IDbConnection型別進行擴充，他會根據Model定義自動渲染SQL語法，對於簡單的CRUD情境相當適合，從原本需要Command以及Parameter的寫法，變成只需要Insert(Model)
使用Dapper.Contrib的前置作業 using Dapper.Contrib.Extensions; [Table(&amp;#34;Member&amp;#34;)] public class Member { [Key] [ExplicitKey] public Guid Id { get; set; } [Computed] public long SequenceId { get; set; } public string Name { get; set; } public int Age { get; set; } } 說明上方使用到幾個Attribute Key : 預設會把Id或是有 [Key] 指定為主鍵、自動運算的欄位，而不產生語法
ExplicitKey : 指定為主鍵，不是自動運算的欄位，要產生語法
Computed : 在執行Insert、Update操作時，不產生語法，該屬性的值是由資料庫計算而來，而不是由應用程式直接提供的
Table(”TableName”) : 預設使用Class Name當Table Name，這明確指定Table Name，不使用Class Name當Table Name</description>
    </item>
    
    <item>
      <title>Async/Await介紹</title>
      <link>https://jiangyugun.github.io/posts/dotnet-async/</link>
      <pubDate>Mon, 17 Jul 2023 04:16:46 +0000</pubDate>
      
      <guid>https://jiangyugun.github.io/posts/dotnet-async/</guid>
      <description>最近因應專案需求，要將現有的API套用Async
之前都只有上網看看別人文章、自己稍微做個實作測試
這是第一次真的在實際專案上應用
所以在開始之前，來補足一下知識，避免碰到問題不知道該從何下手(๑•́ ₃ •̀๑)
Async(非同步)與Sync(同步)的差別 Synchronous(同步) 逐行的方式執行，代表前面程式完成之前，後面的程式必須等待前者執行完，才能運行
Asynchronous(非同步) 第一個程式正在運行時，其他程式也能繼續運行下去
非同步(Asynchronous)不在於提高效能，而是增加產能 非同步的優勢在於降低等待，讓執行緒能夠同時處裡更多事情藉以增加產能 非同步追求的是在相同時間內處理更多請求，並非以更快速度處理掉一個請求 非同步不等於多執行緒 多緒執行 在於建立多條執行緒，把多個工作交給不同執行緒個別處裡，屬分工加速
非同步 允許執行緒在等待時間先處理其他工作，透過消除閒置增加產能
非同步只對 I/O 相關作業有效，對吃CPU作業無法 作業涉及外部資源或I/O相關 存取資料庫 呼叫Web API
等待回應期間，都可透過非同步讓執行緒去處理其他作業
作業涉及大量消耗CPU的重度運算 代表執行緒從頭忙到尾，既然不會閒下來等待，也就不會分別去處裡其他作業
結論 若是一堆吃CPU的作業，增加執行緒肯定可以加速 若為等待I/O回應的作業，增加執行緒的效果不大，變更為非同步作業才算有效 Async 像病毒一樣傳染 剛開始寫async / await很常碰到一件事情，只要方法前面加上async關鍵字，裡外呼叫的方法必須加上await才合規範，而要加await該外部方法也必須得加上async，緊接著外部方法又被要求使用await…
此一設計理由是為了避免同步與非同步寫法混用以防止在GUI/ASP.NET情境產生Deadlock
Deadlock實例，可參考以下:
- await與Task.Result/Task.Wait()的Deadlock問題
- A Practical Example Of Asynchronous Programming in C# and ASP.NET
回傳型別 宣告為async的.NET 方法必須傳回以下三種型別之一 :
Task
作業結束時將控制權還給呼叫端 Task&amp;lt;T&amp;gt;
作業結束時回傳型別為T的物件給呼叫端 void
採射後不理哲學，呼叫後即失去掌握 async void 在實務上不應使用，事件處理器是唯一例外 參考資料 ASP.NET async 基本心法 The Ultimate Guide to Async and Await in C# and ASP.</description>
    </item>
    
  </channel>
</rss>
